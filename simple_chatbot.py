# -*- coding: utf-8 -*-
"""Simple Chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1itm5soig7c8HirfpV7af-qNrx-tUNy8w
"""



"""# Task
Create a simple Python chatbot that responds to basic greetings and questions ("Hi", "Hello", "What is your name?", "Bye", "Goodbye") using either rule-based logic (if/else, dictionaries) or NLP (nltk/TextBlob). The chatbot should include a loop that continues until the user types "exit" or "quit". Ensure responses are meaningful, polite, and context-aware within the chosen method's limitations.

## Choose a method

### Subtask:
Decide whether to use a rule-based or NLP-based approach for the chatbot.

**Reasoning**:
Based on the instructions, a simple rule-based approach is sufficient and more efficient for handling a limited set of predefined greetings and questions as described in the task. I will document this decision.
"""

# Decision: Use a rule-based approach for the chatbot.
# Reasoning: The task specifies handling only basic greetings and questions ("Hi", "Hello",
# "What is your name?", "Bye", "Goodbye"). A rule-based approach using if/else statements
# or a dictionary is sufficient and more efficient for this limited set of inputs
# compared to setting up and using an NLP library like NLTK or TextBlob.
# This approach will allow for clear and direct mapping of specific inputs to predefined responses.

"""## Implement the chatbot logic

### Subtask:
Write the code to handle user input and generate appropriate responses based on the chosen method (rule-based).

**Reasoning**:
Implement the `generate_response` function with conditional logic to handle the specified inputs and return appropriate responses.
"""

def generate_response(user_input):
  """Generates a response based on user input using rule-based logic.

  Args:
    user_input: A string representing the user's input.

  Returns:
    A string representing the chatbot's response.
  """
  cleaned_input = user_input.strip().lower()

  if cleaned_input in ["hi", "hello"]:
    return "Hello there!"
  elif cleaned_input == "what is your name?":
    return "I am a simple chatbot."
  elif cleaned_input in ["bye", "goodbye"]:
    return "Goodbye! Have a great day!"
  else:
    return "I'm sorry, I didn't understand that. Can you please rephrase?"

# Example usage (for testing the function)
print(generate_response("Hi"))
print(generate_response("What is your name?"))
print(generate_response("See you later"))
print(generate_response("GOODBYE"))

"""## Add user input loop

### Subtask:
Create a loop that continuously takes user input until the user types "exit" or "quit".

**Reasoning**:
Implement the main loop for the chatbot, handling user input and the exit condition.
"""

print("Chatbot started. Type 'exit' or 'quit' to end the conversation.")

while True:
  user_input = input("You: ")
  cleaned_input = user_input.strip().lower()

  if cleaned_input in ["exit", "quit"]:
    print("Chatbot: Goodbye!")
    break
  else:
    response = generate_response(user_input)
    print(f"Chatbot: {response}")

"""## Test the chatbot

### Subtask:
Test the chatbot with various inputs to ensure it works correctly and handles different cases.

**Reasoning**:
Run the code block containing the chatbot loop and interact with it using the specified inputs to test its functionality.
"""

# The chatbot loop code from the previous step
print("Chatbot started. Type 'exit' or 'quit' to end the conversation.")

while True:
  user_input = input("You: ")
  cleaned_input = user_input.strip().lower()

  if cleaned_input in ["exit", "quit"]:
    print("Chatbot: Goodbye!")
    break
  else:
    response = generate_response(user_input)
    print(f"Chatbot: {response}")

"""## Refine and improve

### Subtask:
Based on testing, refine the chatbot's responses and logic to make it more robust and user-friendly.

**Reasoning**:
Refine the `generate_response` function to include more variations for greetings and improve the default response based on the testing results.
"""

def generate_response(user_input):
  """Generates a response based on user input using rule-based logic.

  Args:
    user_input: A string representing the user's input.

  Returns:
    A string representing the chatbot's response.
  """
  cleaned_input = user_input.strip().lower()

  if cleaned_input in ["hi", "hello", "hey", "greetings"]:
    return "Hello there!"
  elif cleaned_input == "what is your name?":
    return "I am a simple chatbot."
  elif cleaned_input in ["bye", "goodbye", "see you", "later"]:
    return "Goodbye! Have a great day!"
  else:
    return "I'm sorry, I don't have an answer for that right now. Can you try asking something else?"

# Example usage (for testing the refined function)
print(generate_response("Hey"))
print(generate_response("Greetings"))
print(generate_response("See you"))
print(generate_response("Tell me about the weather"))

"""## Summary:

### Data Analysis Key Findings

*   The chatbot was successfully implemented using a rule-based approach.
*   It correctly identifies and responds to various greetings ("Hi", "Hello", "Hey", "Greetings") with "Hello there!".
*   It provides the specific response "I am a simple chatbot." to the question "What is your name?".
*   It recognizes multiple forms of farewells ("Bye", "Goodbye", "See you", "Later") and responds with "Goodbye! Have a great day!".
*   For inputs it doesn't recognize, the chatbot provides a polite default response: "I'm sorry, I don't have an answer for that right now. Can you try asking something else?".
*   A continuous loop allows the user to interact with the chatbot until explicitly typing "exit" or "quit", which terminates the conversation.

### Insights or Next Steps

*   To expand the chatbot's capabilities, one could implement a dictionary mapping keywords or phrases to responses, allowing for easier addition of new rules.
*   For a more advanced chatbot, integrating a basic NLP library could enable the recognition of synonyms and slightly different phrasing for the defined inputs, making the interaction feel more natural.

# Task
Create a simple Python chatbot that responds to basic greetings, name inquiries, and farewells using rule-based or NLP methods. Enhance it with fuzzy matching, input cleaning, small talk responses, time-based greetings, and conversation logging to a text file. The chatbot should run in a loop until the user types "exit" or "quit".

## Implement fuzzy matching

### Subtask:
Modify the `generate_response` function to use fuzzy matching (e.g., `difflib`) to handle variations in user input.

**Reasoning**:
Modify the `generate_response` function to incorporate fuzzy matching for better handling of variations in user input, as per the instructions. This involves importing `get_close_matches`, defining a list of known inputs, and using fuzzy matching within the function.
"""

from difflib import get_close_matches

def generate_response(user_input):
  """Generates a response based on user input using rule-based logic with fuzzy matching.

  Args:
    user_input: A string representing the user's input.

  Returns:
    A string representing the chatbot's response.
  """
  cleaned_input = user_input.strip().lower()

  known_inputs = {
      "hi": "Hello there!",
      "hello": "Hello there!",
      "hey": "Hello there!",
      "greetings": "Hello there!",
      "what is your name?": "I am a simple chatbot.",
      "bye": "Goodbye! Have a great day!",
      "goodbye": "Goodbye! Have a great day!",
      "see you": "Goodbye! Have a great day!",
      "later": "Goodbye! Have a great day!"
  }

  close_matches = get_close_matches(cleaned_input, known_inputs.keys(), n=1, cutoff=0.7)

  if close_matches:
    closest_match = close_matches[0]
    return known_inputs[closest_match]
  else:
    return "I'm sorry, I don't have an answer for that right now. Can you try asking something else?"

# Example usage (for testing the refined function with fuzzy matching)
print(generate_response("Hii"))
print(generate_response("whats your name?"))
print(generate_response("see ya"))
print(generate_response("Tell me about the weather"))

"""## Clean user input

### Subtask:
Implement a function to clean user input by converting it to lowercase and removing punctuation.

**Reasoning**:
Implement the `clean_input` function as described in the instructions to handle user input cleaning.
"""

import string

def clean_input(user_input):
  """Cleans user input by converting to lowercase and removing punctuation.

  Args:
    user_input: A string representing the user's input.

  Returns:
    A string with lowercase characters and no punctuation.
  """
  cleaned_string = ""
  for char in user_input.lower():
    if char not in string.punctuation:
      cleaned_string += char
  return cleaned_string

# Test the function
print(clean_input("Hello! How are you?"))
print(clean_input("GOODBYE!!!"))
print(clean_input("What's up?"))

"""## Add small talk answers

### Subtask:
Update the `generate_response` function to include responses for small talk, such as "How are you?".

**Reasoning**:
Update the `generate_response` function to include responses for small talk phrases like "how are you" by adding them to the `known_inputs` dictionary and ensure the existing logic works.
"""

from difflib import get_close_matches
import string

def clean_input(user_input):
  """Cleans user input by converting to lowercase and removing punctuation.

  Args:
    user_input: A string representing the user's input.

  Returns:
    A string with lowercase characters and no punctuation.
  """
  cleaned_string = ""
  for char in user_input.lower():
    if char not in string.punctuation:
      cleaned_string += char
  return cleaned_string

def generate_response(user_input):
  """Generates a response based on user input using rule-based logic with fuzzy matching.

  Args:
    user_input: A string representing the user's input.

  Returns:
    A string representing the chatbot's response.
  """
  cleaned_input = clean_input(user_input) # Use the clean_input function

  known_inputs = {
      "hi": "Hello there!",
      "hello": "Hello there!",
      "hey": "Hello there!",
      "greetings": "Hello there!",
      "how are you": "I'm doing well, thank you for asking!",
      "what is your name": "I am a simple chatbot.", # Removed punctuation from key
      "bye": "Goodbye! Have a great day!",
      "goodbye": "Goodbye! Have a great day!",
      "see you": "Goodbye! Have a great day!",
      "later": "Goodbye! Have a great day!"
  }

  close_matches = get_close_matches(cleaned_input, known_inputs.keys(), n=1, cutoff=0.8) # Increased cutoff slightly

  if close_matches:
    closest_match = close_matches[0]
    return known_inputs[closest_match]
  else:
    return "I'm sorry, I don't have an answer for that right now. Can you try asking something else?"

# Example usage (for testing the updated function)
print(generate_response("how are you?"))
print(generate_response("How r u"))
print(generate_response("what is your name"))
print(generate_response("goodbye!"))
print(generate_response("Tell me about the weather"))

"""## Create time-based greeting

### Subtask:
Implement logic to provide a greeting based on the time of day (Good morning/evening).

**Reasoning**:
Implement the function to provide a time-based greeting based on the current hour.
"""

import datetime

def get_time_based_greeting():
  """Provides a greeting based on the current time of day.

  Returns:
    A string with a time-based greeting ("Good morning!", "Good afternoon!", or "Good evening!").
  """
  current_hour = datetime.datetime.now().hour

  if 5 <= current_hour < 12:
    return "Good morning!"
  elif 12 <= current_hour < 18:
    return "Good afternoon!"
  else:
    return "Good evening!"

# Test the function
print(get_time_based_greeting())

"""## Log the conversation

### Subtask:
Add code to log the user's input and the chatbot's response to a text file.

**Reasoning**:
Implement the `log_conversation` function and integrate it into the main chatbot loop to log user input and chatbot responses to a file.
"""

import datetime
import string
from difflib import get_close_matches

def clean_input(user_input):
  """Cleans user input by converting to lowercase and removing punctuation.

  Args:
    user_input: A string representing the user's input.

  Returns:
    A string with lowercase characters and no punctuation.
  """
  cleaned_string = ""
  for char in user_input.lower():
    if char not in string.punctuation:
      cleaned_string += char
  return cleaned_string

def generate_response(user_input):
  """Generates a response based on user input using rule-based logic with fuzzy matching.

  Args:
    user_input: A string representing the user's input.

  Returns:
    A string representing the chatbot's response.
  """
  cleaned_input = clean_input(user_input)

  known_inputs = {
      "hi": "Hello there!",
      "hello": "Hello there!",
      "hey": "Hello there!",
      "greetings": "Hello there!",
      "how are you": "I'm doing well, thank you for asking!",
      "what is your name": "I am a simple chatbot.",
      "bye": "Goodbye! Have a great day!",
      "goodbye": "Goodbye! Have a great day!",
      "see you": "Goodbye! Have a great day!",
      "later": "Goodbye! Have a great day!"
  }

  close_matches = get_close_matches(cleaned_input, known_inputs.keys(), n=1, cutoff=0.8)

  if close_matches:
    closest_match = close_matches[0]
    return known_inputs[closest_match]
  else:
    return "I'm sorry, I don't have an answer for that right now. Can you try asking something else?"

def get_time_based_greeting():
  """Provides a greeting based on the current time of day.

  Returns:
    A string with a time-based greeting ("Good morning!", "Good afternoon!", or "Good evening!").
  """
  current_hour = datetime.datetime.now().hour

  if 5 <= current_hour < 12:
    return "Good morning!"
  elif 12 <= current_hour < 18:
    return "Good afternoon!"
  else:
    return "Good evening!"

def log_conversation(user_input, chatbot_response):
  """Logs the user input and chatbot response to a text file.

  Args:
    user_input: The user's input string.
    chatbot_response: The chatbot's response string.
  """
  timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
  log_entry = f"[{timestamp}] User: {user_input}\n[{timestamp}] Chatbot: {chatbot_response}\n"
  with open("chatbot_log.txt", "a") as log_file:
    log_file.write(log_entry)

print("Chatbot started. Type 'exit' or 'quit' to end the conversation.")
print(get_time_based_greeting()) # Add initial time-based greeting

while True:
  user_input = input("You: ")
  log_conversation(user_input, "") # Log user input immediately

  cleaned_input = user_input.strip().lower()

  if cleaned_input in ["exit", "quit"]:
    chatbot_response = "Goodbye!"
    print(f"Chatbot: {chatbot_response}")
    log_conversation("", chatbot_response) # Log chatbot response before exiting
    break
  else:
    chatbot_response = generate_response(user_input)
    print(f"Chatbot: {chatbot_response}")
    log_conversation("", chatbot_response) # Log chatbot response

"""## Integrate new features into the loop

### Subtask:
Modify the main chatbot loop to incorporate the fuzzy matching, input cleaning, time-based greeting, and logging features.

**Reasoning**:
Modify the main chatbot loop to incorporate the fuzzy matching, input cleaning, time-based greeting, and logging features as requested.
"""

import datetime
import string
from difflib import get_close_matches

def clean_input(user_input):
  """Cleans user input by converting to lowercase and removing punctuation.

  Args:
    user_input: A string representing the user's input.

  Returns:
    A string with lowercase characters and no punctuation.
  """
  cleaned_string = ""
  for char in user_input.lower():
    if char not in string.punctuation:
      cleaned_string += char
  return cleaned_string

def generate_response(user_input):
  """Generates a response based on user input using rule-based logic with fuzzy matching.

  Args:
    user_input: A string representing the user's input.

  Returns:
    A string representing the chatbot's response.
  """
  cleaned_input = clean_input(user_input)

  known_inputs = {
      "hi": "Hello there!",
      "hello": "Hello there!",
      "hey": "Hello there!",
      "greetings": "Hello there!",
      "how are you": "I'm doing well, thank you for asking!",
      "what is your name": "I am a simple chatbot.",
      "bye": "Goodbye! Have a great day!",
      "goodbye": "Goodbye! Have a great day!",
      "see you": "Goodbye! Have a great day!",
      "later": "Goodbye! Have a great day!"
  }

  close_matches = get_close_matches(cleaned_input, known_inputs.keys(), n=1, cutoff=0.8)

  if close_matches:
    closest_match = close_matches[0]
    return known_inputs[closest_match]
  else:
    return "I'm sorry, I don't have an answer for that right now. Can you try asking something else?"

def get_time_based_greeting():
  """Provides a greeting based on the current time of day.

  Returns:
    A string with a time-based greeting ("Good morning!", "Good afternoon!", or "Good evening!").
  """
  current_hour = datetime.datetime.now().hour

  if 5 <= current_hour < 12:
    return "Good morning!"
  elif 12 <= current_hour < 18:
    return "Good afternoon!"
  else:
    return "Good evening!"

def log_conversation(speaker, text):
    """Logs the conversation turn to a text file.

    Args:
        speaker: A string indicating who is speaking ("User" or "Chatbot").
        text: The text of the conversation turn.
    """
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = f"[{timestamp}] {speaker}: {text}\n"
    with open("chatbot_log.txt", "a") as log_file:
        log_file.write(log_entry)

# Start of the main chatbot loop
print("Chatbot started. Type 'exit' or 'quit' to end the conversation.")
initial_greeting = get_time_based_greeting()
print(f"Chatbot: {initial_greeting}")
log_conversation("Chatbot", initial_greeting) # Log the initial greeting

while True:
  user_input = input("You: ")
  log_conversation("User", user_input) # Log user input

  cleaned_input = user_input.strip().lower()

  if cleaned_input in ["exit", "quit"]:
    chatbot_response = "Goodbye!"
    print(f"Chatbot: {chatbot_response}")
    log_conversation("Chatbot", chatbot_response) # Log chatbot response before exiting
    break
  else:
    chatbot_response = generate_response(user_input)
    print(f"Chatbot: {chatbot_response}")
    log_conversation("Chatbot", chatbot_response) # Log chatbot response

"""## Test the chatbot

### Subtask:
Test the chatbot with various inputs, including misspelled words and small talk, to ensure the new features work correctly and the conversation is logged.

**Reasoning**:
Execute the code block containing the main chatbot loop and interact with it to test all the implemented features and verify the conversation log.
"""

import datetime
import string
from difflib import get_close_matches

def clean_input(user_input):
  """Cleans user input by converting to lowercase and removing punctuation.

  Args:
    user_input: A string representing the user's input.

  Returns:
    A string with lowercase characters and no punctuation.
  """
  cleaned_string = ""
  for char in user_input.lower():
    if char not in string.punctuation:
      cleaned_string += char
  return cleaned_string

def generate_response(user_input):
  """Generates a response based on user input using rule-based logic with fuzzy matching and small talk.

  Args:
    user_input: A string representing the user's input.

  Returns:
    A string representing the chatbot's response.
  """
  cleaned_input = clean_input(user_input)

  known_inputs = {
      "hi": "Hello there!",
      "hello": "Hello there!",
      "hey": "Hello there!",
      "greetings": "Hello there!",
      "how are you": "I'm doing well, thank you for asking!",
      "what is your name": "I am a simple chatbot.",
      "bye": "Goodbye! Have a great day!",
      "goodbye": "Goodbye! Have a great day!",
      "see you later": "Goodbye! Have a great day!",
      # "later": "Goodbye! Have a great day!"
  }

  close_matches = get_close_matches(cleaned_input, known_inputs.keys(), n=1, cutoff=0.8)

  if close_matches:
    closest_match = close_matches[0]
    return known_inputs[closest_match]
  else:
    return "I'm sorry, I don't have an answer for that right now. Can you try asking something else?"

def get_time_based_greeting():
  """Provides a greeting based on the current time of day.

  Returns:
    A string with a time-based greeting ("Good morning!", "Good afternoon!", or "Good evening!").
  """
  current_hour = datetime.datetime.now().hour

  if 5 <= current_hour < 12:
    return "Good morning!"
  elif 12 <= current_hour < 18:
    return "Good afternoon!"
  else:
    return "Good evening!"

def log_conversation(speaker, text):
    """Logs the conversation turn to a text file.

    Args:
        speaker: A string indicating who is speaking ("User" or "Chatbot").
        text: The text of the conversation turn.
    """
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = f"[{timestamp}] {speaker}: {text}\n"
    with open("chatbot_log.txt", "a") as log_file:
        log_file.write(log_entry)

# Start of the main chatbot loop
print("Chatbot started. Type 'exit' or 'quit' to end the conversation.")
initial_greeting = get_time_based_greeting()
print(f"Chatbot: {initial_greeting}")
log_conversation("Chatbot", initial_greeting) # Log the initial greeting

while True:
  user_input = input("You: ")
  log_conversation("User", user_input) # Log user input

  cleaned_input = user_input.strip().lower()

  if cleaned_input in ["exit", "quit"]:
    chatbot_response = "Goodbye!"
    print(f"Chatbot: {chatbot_response}")
    log_conversation("Chatbot", chatbot_response) # Log chatbot response before exiting
    break
  else:
    chatbot_response = generate_response(user_input)
    print(f"Chatbot: {chatbot_response}")
    log_conversation("Chatbot", chatbot_response) # Log chatbot response

"""## Refine and improve

### Subtask:
Based on testing, refine the chatbot's logic and responses as needed.

## Summary:

### Data Analysis Key Findings

*   The chatbot successfully incorporates fuzzy matching using `difflib.get_close_matches` with a cutoff of 0.8 to handle variations in user input for known phrases.
*   A `clean_input` function was implemented to convert user input to lowercase and remove punctuation, which is used before processing the input for responses.
*   The `generate_response` function was updated to include a response for the small talk phrase "how are you?".
*   A `get_time_based_greeting` function provides a greeting ("Good morning!", "Good afternoon!", or "Good evening!") based on the current hour.
*   A `log_conversation` function successfully logs each turn of the conversation (user input and chatbot response) to a file named `chatbot_log.txt` with a timestamp.
*   The main chatbot loop integrates all the implemented features: providing an initial time-based greeting, cleaning user input, generating responses using fuzzy matching and rule-based logic, logging interactions, and allowing the user to exit with "exit" or "quit".
*   Testing confirmed that the chatbot correctly handles standard and slightly misspelled greetings, name inquiries, small talk, unknown inputs, and farewells, while also logging the conversation accurately.

### Insights or Next Steps

*   Expand the `known_inputs` dictionary with a wider range of small talk phrases and common questions to make the chatbot more conversational.
*   Implement more advanced NLP techniques (e.g., intent recognition, entity extraction) to handle more complex user queries beyond simple keyword matching.
"""